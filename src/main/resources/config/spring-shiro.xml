<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
     	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
     	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <description>Shiro Configuration</description>

    <!-- 基于 Form 表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="com.wpc.common.security.shiro.MyFormAuthenticationFilter">
        <property name="usernameParam" value="loginName"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>

    <!-- CAS认证过滤器 -->
    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
        <property name="failureUrl" value="/login"/>
    </bean>

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
         <property name="successUrl" value="/" />
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <property name="unauthorizedUrl" value="/WEB-INF/405.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filters">
            <map>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                <!-- 静态资源允许访问 -->
                /static/** = anon
                /favicon.ico = anon
                /console/* = anon
                /druid/** = anon
                /app/* = anon
                /cache/** = anon
                /formulas/** = anon
                /docs/** = anon
                /lang/** = anon
                <!-- anon 允许访问 -->
                /login = authc
                /logout = logout
                <!-- authc 需要授权 -->
                /** = user
            </value>
        </property>
    </bean>

    <!-- 項目自定义的Realm认证登录 授权 -->
    <bean id="shiroDbRealm" class="com.wpc.common.security.shiro.ShiroRealm">
        <!--<property name="credentialsMatcher" ref="credentialsMatcher"/>-->
        <property name="credentialsMatcher" ref="passwordMatcher"/>
        <property name="passwordService" ref="passwordService"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 用户授权信息Cache -->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>-->
    <bean id="cacheManager" class="com.wpc.common.security.shiro.cache.JedisCacheManager"/>

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroDbRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 定义要使用的session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
    <!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"/>-->
    <bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
        <property name="passwordService" ref="passwordService"/>
    </bean>
    <bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
        <property name="hashService" ref="hashService"/>
        <property name="hashFormat" ref="hashFormat"/>
        <property name="hashFormatFactory" ref="hashFormatFactory"/>
    </bean>
    <bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService"/>
    <bean id="hashFormat" class="org.apache.shiro.crypto.hash.format.Shiro1CryptFormat"/>
    <bean id="hashFormatFactory" class="org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory"/>
    <!--以上三个bean实测不可删除-->

    <!-- 定义Session ID生成管理器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- 配置Session DAO的操作处理 -->
 	<bean id="sessionDAO" class="com.wpc.common.security.shiro.session.JedisSessionDAO">
 		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
 		<!--<property name="sessionKeyPrefix" value="${redis.keyPrefix}_session_" />-->
 	</bean>
    <!--<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        &lt;!&ndash; 设置session缓存的名字，这个名字可以任意 &ndash;&gt;
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        &lt;!&ndash; 定义该Session DAO操作中所使用的ID生成器 &ndash;&gt;
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>-->

    <!-- 配置需要向Cookie中保存数据的配置模版 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
        <constructor-arg name="name" value="wpc.session.id"/>
        <!-- 保证该系统不会受到跨域的脚本操作供给 -->
        <property name="httpOnly" value="true"/>
        <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
        <property name="maxAge" value="180000"/>
    </bean>
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30 天 -->
    </bean>
    <!-- rememberMe 管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <!-- 定义会话管理器的操作 -->
    <bean id="sessionManager" class="com.wpc.common.security.shiro.session.SessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>
    <!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒 -->
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>
